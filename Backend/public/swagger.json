{
  "components": {
    "schemas": {
      "LoginWithToken": {
        "properties": {
          "status": {
            "type": "number"
          },
          "message": {
            "type": "string"
          },
          "token": {
            "type": "string"
          }
        },
        "required": ["status", "message"],
        "type": "object",
        "additionalProperties": false
      },
      "UserCredentialInput": {
        "properties": {
          "username": {
            "type": "string"
          },

          "password": {
            "type": "string"
          }
        },
        "required": ["username", "password"],
        "type": "object",
        "additionalProperties": false
      },
      "UserStatus": {
        "properties": {
          "username": {
            "type": "string"
          },
          "lastStatus": {
            "type": "string"
          }
        },
        "required": ["username", "lastStatus"],
        "type": "object",
        "additionalProperties": false
      },
      "PublicMessage": {
        "properties": {
          "id": {
            "type": "number"
          },
          "content": {
            "type": "string"
          },

          "time": {
            "type": "string"
          },
          "sender": {
            "type": "string"
          }
        },
        "required": ["content", "time", "sender"],
        "type": "object",
        "additionalProperties": false
      },
      "UserProfile": {
        "properties": {
          "newUsername": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },

          "role": {
            "type": "string"
          },
          "isActivated": {
            "type": "boolean"
          }
        },
        "required": [],
        "type": "object",
        "additionalProperties": false
      },
      "JwtToken": {
        "properties": {
          "token": {
            "type": "string"
          }
        },
        "required": ["token"],
        "type": "object",
        "additionalProperties": false
      },
      "lastStatus": {
        "properties": {
          "lastStatus": {
            "type": "string"
          }
        },
        "required": ["lastStatus"],
        "type": "object",
        "additionalProperties": false
      },
      "Message": {
        "properties": {
          "id": {
            "type": "number"
          },
          "content": {
            "type": "string"
          },

          "time": {
            "type": "string"
          },
          "sender": {
            "type": "string"
          },
          "sendee": {
            "type": "string"
          }
        },
        "required": ["content", "time", "sender", "sendee"],
        "type": "object",
        "additionalProperties": false
      },
      "waitlistUser": {
        "properties": {
          "username": {
            "type": "string"
          },
          "foodComments": {
            "type": "string"
          }
        },
        "required": ["username","foodComments"],
        "type": "object",
        "additionalProperties": false
      },
      "updateWaitlistUserInfo": {
        "properties": {
          "username": {
            "type": "string"
          },
          "foodDonor": {
            "type": "string"
          }
        },
        "required": ["username","foodDonor"],
      "Schedule": {
        "properties": {
          "scheduleid": {
            "type": "string"
          },
          "time": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "scheduler": {
            "type": "string"
          },
          "schedulee": {
            "type": "string"
          }
        },
        "required": ["scheduleid", "time", "status", "scheduler", "schedulee"],
        "type": "object",
        "additionalProperties": false
      }
    },
    "securitySchemes": {}
  },
  "info": {
    "title": "esn api",
    "version": "0.0.1",
    "license": {
      "name": "MIT"
    },
    "contact": {
      "name": "sb1"
    }
  },
  "openapi": "3.0.0",
  "paths": {
    "/api/users/register": {
      "post": {
        "operationId": "Register",
        "responses": {
          "200": {
            "description": "LoginWithToken",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginWithToken"
                }
              }
            }
          }
        },
        "description": "Register a user using the provided username and password",
        "security": [],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserCredentialInput"
              }
            }
          }
        }
      }
    },
    "/api/users/login": {
      "post": {
        "operationId": "LoginUser",
        "responses": {
          "200": {
            "description": "LoginWithToken",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginWithToken"
                }
              }
            }
          }
        },
        "description": "login a user with provided username and password",
        "security": [],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserCredentialInput"
              }
            }
          }
        }
      }
    },

    "/api/users/:username/status": {
      "get": {
        "operationId": "getUserStatusByUsername",
        "responses": {
          "200": {
            "description": "user status",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/lastStatus"
                  },
                  "lastStatus": { "type": "string" }
                }
              }
            }
          }
        },
        "description": "get the selected user's status with their username as api",
        "security": [],
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string"
            },
            "name": "username",
            "in": "path"
          }
        ]
      }
    },
    "/api/users/status": {
      "get": {
        "operationId": "getUserStatus",
        "responses": {
          "200": {
            "description": "user status",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/UserStatus"
                  },
                  "type": "array"
                }
              }
            }
          }
        },
        "description": "Update Current User's Status",
        "security": [],
        "parameters": []
      }
    },
    "/api/messages": {
      "post": {
        "operationId": "post message",
        "responses": {
          "200": {
            "description": "PostMessage",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          }
        },
        "description": "post a message",
        "security": [],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Message"
              }
            }
          }
        }
      }
    },
    "/api/messages/:sender/:sendee": {
      "get": {
        "operationId": "get all messages from the sender and sendee",
        "responses": {
          "200": {
            "description": "GetMessages"
          }
        },
        "description": "get all messages from the sender and sendee",
        "security": [],
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string"
            },
            "name": "sender",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "type": "string"
            },
            "name": "sendee",
            "in": "path"
          }
        ]
      }
    },
    "/api/messages/:sendee": {
      "get": {
        "operationId": "search for informations",
        "responses": {
          "200": {
            "description": "Return the search result"
          },
          "400": {
            "description": "Invalid search request"
          }
        },
        "description": "search for informations",
        "security": [],
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string" },
            "name": "context",
            "in": "path"
          },
          {
            "required": true,
            "schema": { "type": "string" },
            "name": "criteria",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string" },
            "name": "sender",
            "in": "query"
          },
          {
            "required": false,
            "schema": { "type": "string" },
            "name": "sendee",
            "in": "query"
          }
        ]
      }
    },
    "/api/messages/last/:sender/:sendee": {
      "get": {
        "operationId": "get the last message from the sender to sendee",
        "responses": {
          "200": {
            "description": "GetLastMessages"
          }
        },
        "description": "get the last message from the sender to sendee",
        "security": [],
        "parameters": [
          {
            "required": true,
            "schema": {
              "type": "string"
            },
            "name": "sender",
            "in": "path"
          },
          {
            "required": true,
            "schema": {
              "type": "string"
            },
            "name": "sendee",
            "in": "path"
          }
        ]
      }
    },
    "/api/search/:context": {
      "get": {
        "operationId": "SearchForInformations",
        "responses": {
          "200": {
            "description": "Return the search result"
          },
          "400": {
            "description": "Invalid search request"
          }
        },
        "description": "search for informations",
        "security": [],
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string" },
            "name": "context",
            "in": "path",
            "description": "Context of the search, can be `'citizens'`, `'messages'` or `'announcements'`, other values will return 400."
          },
          {
            "required": true,
            "schema": { "type": "string" },
            "name": "criteria",
            "in": "query",
            "description": "Criteria of the search, it should be related to the context. For example, if the `context` is `'citizens'`, the criteria should input citizen's username. And there are some special rules for criteria that can be inputted, it would return specific result."
          },
          {
            "required": false,
            "schema": { "type": "string" },
            "name": "sender",
            "in": "query",
            "description": "The sender of the message, only available when `context` is `'messages'`."
          },
          {
            "required": false,
            "schema": { "type": "string" },
            "name": "sendee",
            "in": "query",
            "description": "The sendee of the message, only available when `context` is `'messages'`. If `sendee` is `'Lobby'`, it would return search result for public messages."
          }
        ]
      }
    },
    "/groups": {
      "post": {
        "operationId": "CreateGroupChat",
        "responses": {
          "201": {
            "description": "Group created successfully"
          },
          "400": {
            "description": "Invalid input"
          },
          "409": {
            "description": "Group name already exists"
          }
        },
        "description": "Create a new group chat",
        "security": [],
        "parameters": [
          {
            "required": true,
            "schema": { "type": "object" },
            "name": "groupDetails",
            "in": "body",
            "description": "Details of the group to be created, including `name` and `description`."
          }
        ]
      },
      "get": {
        "operationId": "ReadGroupChats",
        "responses": {
          "200": {
            "description": "List of groups retrieved successfully"
          },
          "204": {
            "description": "No groups available"
          }
        },
        "description": "Read list of all group chats",
        "security": [],
        "parameters": [
          {
            "required": false,
            "schema": { "type": "boolean" },
            "name": "open",
            "in": "query",
            "description": "Filter for open groups"
          },
          {
            "required": false,
            "schema": { "type": "boolean" },
            "name": "joined",
            "in": "query",
            "description": "Filter for groups joined by the user"
          }
        ]
      }
    },
    "/groups/{groupName}": {
      "put": {
        "operationId": "UpdateGroupChat",
        "responses": {
          "200": {
            "description": "Group updated successfully"
          },
          "404": {
            "description": "Group not found"
          },
          "400": {
            "description": "Invalid input"
          }
        },
        "description": "Update group chat information",
        "security": [],
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string" },
            "name": "groupName",
            "in": "path",
            "description": "Name of the group to be updated"
          },
          {
            "required": true,
            "schema": { "type": "object" },
            "name": "newGroupDetails",
            "in": "body",
            "description": "New details of the group, including `newName` and `newDescription`."
          }
        ]
      },
      "delete": {
        "operationId": "DeleteGroupChat",
        "responses": {
          "200": {
            "description": "Group deleted successfully"
          },
          "404": {
            "description": "Group not found"
          }
        },
        "description": "Delete a group chat",
        "security": [],
        "parameters": [
          {
            "required": true,
            "schema": { "type": "string" },
            "name": "groupName",
            "in": "path",
            "description": "Name of the group to be deleted"
          }
        ]
      }
    }
  },
  "/api/users/:username/profile": {
    "put": {
      "operationId": "update user profile",
      "responses": {
        "200": {
          "description": "updateUserProfile"
        }
      },
      "description": "update user profile",
      "security": [],
      "parameters": [
        {
          "required": true,
          "schema": {
            "type": "string"
          },
          "name": "username",
          "in": "path"
        }
      ],
      "requestBody": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/UserProfile"
            }
          }
        }
      }
    }
  },
  "/api/schedules/:scheduler/:schedulee": {
    "get": {
      "operationId": "get all schedules between scheduler and schedulee",
      "responses": {
        "200": {
          "description": "GetSchedule"
        }
      },
      "description": "get all schedules between scheduler and schedulee",
      "security": [],
      "parameters": [
        {
          "required": true,
          "schema": {
            "type": "string"
          },
          "name": "scheduler",
          "in": "path"
        },
        {
          "required": true,
          "schema": {
            "type": "string"
          },
          "name": "schedulee",
          "in": "path"
        }
      ]
    }
  },
  "/api/schedules": {
    "post": {
      "operationId": "post schedule between scheduler and schedulee",
      "responses": {
        "200": {
          "description": "PostSchedule",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Schedule"
              }
            }
          }
        }
      },
      "description": "post schedule between scheduler and schedulee",
      "security": [],
      "parameters": [],
      "requestBody": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Schedule"
            }
          }
        }
      }
    }
  },
  "/api/schedules/:scheduleid": {
    "put": {
      "operationId": "schedule update",
      "responses": {
        "200": {
          "description": "UpdateSuccessful",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Schedule"
              }
            }
          }
        },
        "404": {
          "description": "ScheduleNotFound"
        }
      },
      "description": "Update an existing schedule",
      "security": [],
      "parameters": [
        {
          "name": "scheduleid",
          "in": "path",
          "required": true,
          "description": "Unique identifier of the schedule to be updated",
          "schema": {
            "type": "string"
          }
        }
      ],
      "requestBody": {
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Schedule"
            }
          }
        }
      }
    }
  },
  "/api/schedules/deletion/:scheduleid": {
    "delete": {
      "operationId": "delete schedule",
      "responses": {
        "200": {
          "description": "DeleteSuccessful"
        },
        "404": {
          "description": "ScheduleNotFound"
        }
      },
      "description": "Delete an existing schedule",
      "security": [],
      "parameters": [
        {
          "name": "scheduleid",
          "in": "path",
          "required": true,
          "description": "Unique identifier of the schedule to be deleted",
          "schema": {
            "type": "string"
          }
        }
      ]
    }
  },
  "/api/foodWaitlist/allCitizens": {
    "get": {
      "operationId": "get the user info on the waitlist",
      "responses": {
        "200": {
          "description": "get user info from FoodWaitlist"
        }
      },
      "content":{
        "application/json": {
          "schema": {
            "$ref": "#/components/schemas/waitlistUser"
          }
        }
      },
      "description": "get the user info on the waitlist",
      "security": [],
      "parameters": [
        {
          "required": true,
          "schema": {
            "type": "string"
          },
          "name": "citizen",
          "in": "path"
        }
      ]
    }
  },
  "/api/foodWaitlist/:citizen": {
    "post": {
      "operationId": "join the waitlist",
      "responses": {
        "200": {
          "description": "joinFoodWaitlist"
        }
      },
      "content":{
        "application/json": {
          "schema": {
            "$ref": "#/components/schemas/waitlistUser"
          }
        }
      },
      "description": "join the waitlist",
      "security": [],
      "parameters": [
        {
          "required": true,
          "schema": {
            "type": "string"
          },
          "name": "citizen",
          "in": "path"
        }
      ]
    },
    "put": {
      "operationId": "update the user's donor and status on the waitlist",
      "responses": {
        "200": {
          "description": "updateStatusOnFoodWaitlist"
        }
      },
      "content":{
        "application/json": {
          "schema": {
            "$ref": "#/components/schemas/updateWaitlistUserInfo"
          }
        }
      },
      "description": "update the user's donor and status on the waitlist",
      "security": [],
      "parameters": [
        {
          "required": true,
          "schema": {
            "type": "string"
          },
          "name": "citizen",
          "in": "path"
        }
      ]
    },
    "delete": {
      "operationId": "delete individual user info on the waitlist",
      "responses": {
        "200": {
          "description": "delete individual user info from FoodWaitlist"
        }
      },
      "content":{
        "application/json": {
          "schema": {
            "$ref": "#/components/schemas/waitlistUser"
          }
        }
      },
      "description": "delete individual user info on the waitlist",
      "security": [],
      "parameters": [
        {
          "required": true,
          "schema": {
            "type": "string"
          },
          "name": "citizen",
          "in": "path"
        }
      ]
    }
  }
},
  "servers": [
    {
      "url": "/"
    }
  ]
}
